1c1
< pragma solidity ^0.4.21;
---
> pragma solidity^0.4.25;
3,14c3
< import "./RBAC.sol";
< 
< 
< contract CitizensRecord is RBAC {
<     bool public status;
<     address admin;
<     uint public numberOfActiveUsers;
<     uint32 nextId;
< 
<     mapping(uint32 => Citizen) citizensStorage;
<     mapping(uint32 => ClinicRecords) clinicStorage;
<     mapping(uint32 => LegalRecords) legalStorage;
---
> contract CitizensRecord {
17d5
<         bool alive;
26,34d13
<         bytes32 image;
<     }
< 
<     struct ClinicRecords {
<         Register[] records;
<     }
< 
<     struct LegalRecords {
<         Register[] records;
37,45c16
<     struct Register {
<         string record;
<         string date;
<         bool valid;
<     }
< 
<     event UserAdded(uint32 ID);
<     event UserRemoved(uint32 ID);
<     event StatusChanged(bool Status);
---
>     address president;
48,49c19
<         admin = msg.sender;
<         addRole(msg.sender, RolesEnum.Admin);
---
>         president = msg.sender;
51,52c21,29
< 
<     modifier onlyAdmin() {
---
>     
>     // This contract only defines a modifier but does not use
>     // it: it will be used in derived contracts.
>     // The function body is inserted where the special symbol
>     // `_;` in the definition of a modifier appears.
>     // This means that if the president calls this function, the
>     // function is executed and otherwise, an exception is
>     // thrown.
>     modifier onlypresident() {
54,55c31,32
<             msg.sender == admin,
<             "Only the admin can call this function."
---
>             msg.sender == president,
>             "Only the president of the country can call this function."
58c35
<     }
---
>     } 
59a37,39
>     // Citizen[] public citizensStorage;
>     mapping(uint32=>Citizen) citizensStorage;
>     
61,65c41
<         return citizensStorage[_ID].ID == 0;
<     }
< 
<     function isAlive(uint32 _ID) private view returns (bool){
<         return citizensStorage[_ID].alive;
---
>                     return citizensStorage[_ID].ID == 0 ? true : false;
69c45
<         string _name,
---
>         string _name, 
76,79c52,65
<         uint32 _ID,
<         bytes32 _image) public onlyAdmin {
< 
<         require(is_available(_ID), "The ID it's not available");
---
>         uint32 _ID ) public onlypresident {
>            
>         require(is_available( _ID ), "The ID it's not available");
>             
>             Citizen memory citizen;
>             
>             citizen.name = _name;
>             citizen.lastName = _lastName;
>             citizen.birthDate = _birthDate;
>             citizen.gender = _gender;
>             citizen.nacionality = _nacionality;
>             citizen.residence = _residence;
>             citizen.city = _city;
>             citizen.ID = _ID;
81,119c67
<         Citizen memory citizen;
< 
<         citizen.name = _name;
<         citizen.lastName = _lastName;
<         citizen.birthDate = _birthDate;
<         citizen.gender = _gender;
<         citizen.nacionality = _nacionality;
<         citizen.residence = _residence;
<         citizen.city = _city;
<         citizen.ID = _ID;
<         citizen.image = _image;
<         citizen.alive = true;
< 
<         citizensStorage[_ID] = citizen;
<         numberOfActiveUsers++;
<         emit UserAdded(_ID);
<     }
< 
<     function removeUser(uint32 ID) public onlyAdmin {
<         require(isAlive(ID), 'The citizen is dead');
< 
<         citizensStorage[ID].alive = false;
<         numberOfActiveUsers--;
<         event UserRemoved(ID);
<     }
< 
<     function registerClinicRecord(
<         uint32 ID,
<         string record,
<         string date
<     ) public onlyRoles(msg.sender, [RolesEnum.Doctor, RolesEnum.Admin]) {
<         require(isAlive(ID), 'The citizen is dead');
< 
<         Register memory reg;
<         reg.record = record;
<         reg.date = date;
<         reg.valid = true;
< 
<         clinicStorage[ID].records.push(reg);
---
>             citizensStorage[_ID] = citizen;           
122,204d69
<     function registerLegalRecord(
<         uint32 ID,
<         string record,
<         string date
<     ) onlyRoles(msg.sender, [RolesEnum.Police, RolesEnum.Admin]) {
<         require(isAlive(ID), 'The citizen is dead');
< 
<         Register memory reg;
<         reg.record = record;
<         reg.date = date;
<         reg.valid = true;
< 
<         legalStorage[ID].records.push(reg);
<     }
< 
<     function deleteClinicRecord(
<         uint32 ID,
<         uint32 recordPosition
<     ) public onlyRoles(msg.sender, [RolesEnum.Doctor, RolesEnum.Admin]) {
<         require(isAlive(ID), 'The citizen is dead');
<         require(clinicStorage[ID].records[recordPosition].valid, "The incident does not exist");
< 
<         clinicStorage[ID].records[recordPosition].valid = false;
<     }
< 
<     function deleteLegalRecord(
<         uint32 ID,
<         uint32 recordPosition
<     ) public onlyRoles(msg.sender, [RolesEnum.Police, RolesEnum.Admin]) {
<         require(isAlive(ID), 'The citizen is dead');
<         require(legalStorage[ID].records[recordPosition].valid, "The incident does not exist");
< 
<         legalStorage[ID].records[recordPosition].valid = false;
<     }
< 
<     function getRegister(Register r) private returns (bytes32[]) {
<         bytes32[] res;
<         res[0] = r.record;
<         res[1] = r.date;
<         res[2] = string(r.valid);
<         return res;
<     }
< 
<     function getNumberClinicRecords(uint32 ID) public onlyRoles(msg.sender, [RolesEnum.Doctor, RolesEnum.Admin]) returns (uint) {
<         require(is_available(_ID), "The ID it's not available");
<         return clinicStorage[ID].records.length;
<     }
< 
<     function getNumberLegalRecords(uint32 ID) public onlyRoles(msg.sender, [RolesEnum.Police, RolesEnum.Admin]) returns (uint) {
<         require(is_available(_ID), "The ID it's not available");
<         return legalStorage[ID].records.length;
<     }
< 
<     function getClinicRecords(
<         uint32 ID,
<         uint32 position
<     ) public onlyRoles(msg.sender, [RolesEnum.Doctor, RolesEnum.Admin]) returns (bytes32[]) {
<         require(is_available(_ID), "The ID it's not available");
<         return getRegister(clinicStorage[ID].records[position]);
<     }
< 
<     function getLegalRecords(
<         uint32 ID,
<         uint32 position
<     ) public onlyRoles(msg.sender, [RolesEnum.Police, RolesEnum.Admin]) returns (bytes32[]) {
<         require(is_available(_ID), "The ID it's not available");
<         return getRegister(legalStorage[ID].records[position]);
<     }
< 
<     function addRole(address addr, RolesEnum roleName) public onlyAdmin {
<         addRole(addr, roleName);
<     }
< 
<     function removeRole(address addr, RolesEnum roleName) public onlyAdmin {
<         removeRole(addr, roleName);
<     }
< 
<     function changeStatus(bool st) public onlyAdmin {
<         status = st;
<         emit StatusChanged(st);
<     }
< 
< 
214,216c79,81
<     function get_name(uint32 _ID) public view returns (uint32, string, string) {
< 
<         return (citizensStorage[_ID].ID, citizensStorage[_ID].name, citizensStorage[_ID].lastName);
---
>     function get_name(uint32 _ID) public view returns (uint32, string, string ) {
>         
>         return (citizensStorage[_ID].ID, citizensStorage[_ID].name, citizensStorage[_ID].lastName );
219,220c84,85
<     function get_residency(uint32 _ID) public view returns (uint32, string, string, string, string) {
< 
---
>     function get_residency(uint32 _ID) public view returns (uint32, string, string, string, string ) {
>         
224,226c89,91
<     function get_basic_info(uint32 _ID) public view returns (uint32, string, string, string, string, bytes32) {
< 
<         return (citizensStorage[_ID].ID, citizensStorage[_ID].name, citizensStorage[_ID].birthDate, citizensStorage[_ID].gender, citizensStorage[_ID].nacionality, citizensStorage[_ID].image);
---
>     function get_basic_info(uint32 _ID) public view returns (uint32, string, string, string, string ) {
>         
>         return (citizensStorage[_ID].ID, citizensStorage[_ID].name, citizensStorage[_ID].birthDate, citizensStorage[_ID].gender, citizensStorage[_ID].nacionality);
231c96
<         return admin;
---
>         return president;
233d97
< 
234a99
> 
